@using AgileMindsUI.Client.Auth
@inject JwtAuthenticationStateProvider AuthenticationStateProvider
<MudPaper Class="pa-2 ma-2" Elevation="0">
    @if (loadingTasks)
    {
        <MudProgressLinear Color="Color.Info" Indeterminate="true" Class="my-7" />
    }
    else
    {
        @if (filteredTasks != null && filteredTasks.Count > 0)
        {
            <MudGrid Justify="Justify.SpaceBetween" Style="align-items:center;">
                <MudItem xs="5">
                    <MudTextField T="string"
                                  Label="Search tasks"
                                  @bind-Value="searchTerm"
                                  Variant="Variant.Outlined"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  Class="mb-0"
                                  DebounceInterval="400"
                                  Clearable="true"
                                  Style="padding-top: 0px !important;" />
                </MudItem>
                <MudItem>
                    <MudButton Color="Color.Dark"
                               Variant="Variant.Filled"
                               StartIcon="@Icons.Material.Filled.Refresh"
                               @onclick="@(async (e) => await ReloadTasks(true))"
                               Style="padding-right: 4px !important;" />
                </MudItem>
            </MudGrid>
            <MudTable Items="@filteredTasks" Hover="true" Bordered="true" Striped="true">
                <HeaderContent>
                    <MudTh>ID</MudTh>
                    <MudTh>Name</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Owner</MudTh>
                    <MudTh>Priority</MudTh>
                    <MudTh>Due Date</MudTh>
                </HeaderContent>
                <RowTemplate Context="context">
                    <MudTd DataLabel="ID">@context.Id</MudTd>
                    <MudTd DataLabel="Name" @onclick="@(async () => await OnTaskRowClicked(context))">
                        @context.Name
                    </MudTd>
                    <MudTd DataLabel="Status">
                        <MudChip T="string" Style="@GetStatusStyle(context.Status.ToString())">@context.Status.ToString()</MudChip>
                    </MudTd>
@*                     <MudTd DataLabel="Owner">@((context.AssignedUser != null && !string.IsNullOrEmpty(context.AssignedUser.Username)) ? context.AssignedUser.Username : "")</MudTd>

 *@
@*                     <MudTd DataLabel="AssignedTo">@((context.AssignedUser != null && !string.IsNullOrEmpty(context.AssignedUser.Username)) ? context.AssignedUser.Username : "")</MudTd>
 *@
                    <MudTd DataLabel="Owner">
                        @if (context.AssignedUser != null && !string.IsNullOrEmpty(context.AssignedUser.Username))
                        {
                            @context.AssignedUser.Username
                        }
                        else
                        {
                            <i>No owner assigned</i>
                        }
                    </MudTd>
                    <MudTd DataLabel="Priority">@context.Priority</MudTd>
                    <MudTd DataLabel="Due Date">@context.DueDate?.ToString("yyyy-MM-dd")</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 5, 10, 25, 50, 100, int.MaxValue }" />
                </PagerContent>
            </MudTable>
        }
        else
        {
            <MudText Typo="Typo.body2">No tasks created yet.</MudText>
        }
    }
</MudPaper>

@code {
    public List<AgileMinds.Shared.Models.Task> tasks = new List<AgileMinds.Shared.Models.Task>();
    // public List<AgileMinds.Shared.Models.Task> filteredTasks => string.IsNullOrEmpty(searchTerm)
    //     ? tasks
    //     : tasks.Where(t => t.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
    //                        t.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();

    // Filtered tasks, depending on whether the component should show tasks in sprint or not
    public List<AgileMinds.Shared.Models.Task> filteredTasks => string.IsNullOrEmpty(searchTerm)
        ? (ShowTasksInSprint ? tasksInSprint : tasksNotOnSprint)
        : (ShowTasksInSprint ? tasksInSprint : tasksNotOnSprint)
            .Where(t => t.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                        t.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();

    private List<AgileMinds.Shared.Models.Task> tasksInSprint = new List<AgileMinds.Shared.Models.Task>();
    private List<AgileMinds.Shared.Models.Task> tasksNotOnSprint = new List<AgileMinds.Shared.Models.Task>();

    public string searchTerm = string.Empty;
    private int userID { get; set; }
    public AgileMinds.Shared.Models.Project? project { get; set; } = new AgileMinds.Shared.Models.Project();

    // Parameters coming from the parent  (Methods in this case)
    [Parameter] public Func<Task> LoadSprints { get; set; }
    [Parameter] public Func<Task> LoadMembers { get; set; }
    [Parameter] public Func<int, Task> LoadOpenSprint { get; set; }
    [Parameter] public int ProjectId { get; set; }
    [Parameter] public AgileMinds.Shared.Models.Sprint? OpenSprint { get; set; }

    // These parameters are passed from the parent to replace injected services
    [Parameter] public HttpClient Http { get; set; }
    [Parameter] public ISnackbar Snackbar { get; set; }
    [Parameter] public Services.ProjectService ProjectService { get; set; }
    [Parameter] public IDialogService DialogService { get; set; }
    [Parameter]
    public bool ShowTasksInSprint { get; set; } = false;

    // Call back to inform the parent page on the status of something
    [Parameter] public EventCallback<AgileMinds.Shared.Models.Task> HandleTaskAdded { get; set; }
    [Parameter] public bool loadingTasks { get; set; }

    protected override async Task OnInitializedAsync()
    {
        loadingTasks = true;

        userID = await GetCurrentUserId();
        project = await ProjectService.FetchProjectById(ProjectId);

        if (project == null)
        {
            Snackbar.Add("Project not found.", Severity.Error);
            return;
        }

        // Load OpenSprint before tasks
        await LoadOpenSprint(ProjectId);

        await Task.WhenAll(LoadMembers(), LoadTasks());
        UpdateTaskLists();

        Console.WriteLine($"Tasks component OpenSprint Name: {OpenSprint?.Name}");

        loadingTasks = false;
        StateHasChanged();

    }

    private async Task<int> GetCurrentUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userIdClaim = user.FindFirst(claim => claim.Type == "userid");
        return int.Parse(userIdClaim?.Value ?? "0");
    }

    public async Task LoadTasks()
    {
        loadingTasks = true;

        try
        {
            var response = await Http.GetAsync($"api/projects/{ProjectId}/tasks");
            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();

                // Handle empty content gracefully
                if (string.IsNullOrWhiteSpace(responseContent))
                {
                    tasks = new List<AgileMinds.Shared.Models.Task>();
                }
                else
                {
                    tasks = await response.Content.ReadFromJsonAsync<List<AgileMinds.Shared.Models.Task>>() ?? new List<AgileMinds.Shared.Models.Task>();
                }
                UpdateTaskLists();
            }
            else
            {
                tasks = new List<AgileMinds.Shared.Models.Task>();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading tasks: {ex.Message}", Severity.Error);
            tasks = new List<AgileMinds.Shared.Models.Task>(); // Ensure tasks list is at least an empty list
        }
        finally
        {
            loadingTasks = false;
        }
    }



    private void UpdateTaskLists()
    {
        if (OpenSprint != null)
        {

            // Tasks assigned to the current open sprint
            tasksInSprint = tasks.Where(t => t.SprintId == OpenSprint.Id).ToList();

            // Tasks not assigned to the current open sprint
            tasksNotOnSprint = tasks.Where(t => t.SprintId == null || t.SprintId != OpenSprint.Id).ToList();

        }
        else
        {
            tasksInSprint = new List<AgileMinds.Shared.Models.Task>();
            tasksNotOnSprint = tasks.ToList();
        }
        StateHasChanged();
    }



    private async Task ReloadTasks(bool taskAdded = true)
    {
        try
        {
            loadingTasks = true;

            // Reload the tasks from the server or wherever they are stored
            await LoadTasks();

            // If a task was added, invoke the OnTaskAdded callback if it has a delegate
            if (taskAdded && HandleTaskAdded.HasDelegate)
            {
                var newTask = tasks.LastOrDefault(); // Or the specific task that was added
                if (newTask != null)
                {
                    await HandleTaskAdded.InvokeAsync(newTask);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error reloading tasks: {ex.Message}", Severity.Error);
        }
        finally
        {
            loadingTasks = false;
            StateHasChanged(); // Ensure the UI is updated
        }
    }



    public async Task FetchSprints()
    {
        if (LoadSprints != null)
        {
            await LoadSprints.Invoke();
        }
    }

    public async Task FetchMembers()
    {
        if (LoadMembers != null)
        {
            await LoadMembers.Invoke();
        }
    }

    public async Task FetchOpenSprint(int projectId)
    {
        if (LoadOpenSprint != null)
        {
            await LoadOpenSprint.Invoke(projectId);
        }
        Console.WriteLine($"After FetchOpenSprint: OpenSprint Name: {OpenSprint?.Name}");

        // Now update the task lists after OpenSprint is loaded
        if (OpenSprint != null)
        {
            UpdateTaskLists();
        }
        else
        {
            Console.WriteLine("OpenSprint is null after fetching.");
        }
    }


    public void OpenCreateTaskDialog()
    {
        var parameters = new DialogParameters
        {
            { "ProjectId", ProjectId },
            { "OnTaskAdded", EventCallback.Factory.Create<AgileMinds.Shared.Models.Task>(this, HandleTaskAdded) },
            { "OpenSprint", OpenSprint }
        };

        DialogService.Show<Components.AddTaskDialog>("Create Task", parameters);
    }

    public void OpenEditTaskDialog(AgileMinds.Shared.Models.Task task)
    {
        if (OpenSprint == null)
        {
            Snackbar.Add("Please wait until the sprint is fully loaded.", Severity.Warning);
            return;
        }
        var parameters = new DialogParameters
        {
            { "Task", task },
            { "ProjectId", ProjectId },
            { "OpenSprint", OpenSprint },
            { "OnTaskAdded", EventCallback.Factory.Create<AgileMinds.Shared.Models.Task>(this, HandleTaskAdded) }
        };

        var options = new DialogOptions { CloseButton = true, FullWidth = true };

        DialogService.Show<Components.AddTaskDialog>("Edit Task", parameters, options);
    }

    public async Task OnTaskRowClicked(AgileMinds.Shared.Models.Task task)
    {
        OpenEditTaskDialog(task);
    }

    public string GetStatusStyle(string status)
    {
        return status switch
        {
            "Pending" => "background-color:var(--mud-palette-error-lighten) !important; width: 100px;",
            "InProgress" => "background-color:var(--mud-palette-warning-darken) !important; width: 100px;",
            "Completed" => "background-color:var(--mud-palette-success-darken) !important; width: 100px;",
            _ => "background-color:var(--mud-palette-default) !important;"
        };
    }

}
