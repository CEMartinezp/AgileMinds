@page "/account"

@* @attribute [Microsoft.AspNetCore.Authorization.Authorize] *@

@inject HttpClient Http
@inject ISnackbar Snackbar
@inject JwtAuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject NotificationService NotificationService

@using AgileMinds.Shared.Models
@using AgileMindsUI.Client.Auth
@using AgileMindsUI.Client.Services

<MudPaper Class="px-6 py-4 ma-2" Elevation="4">
    <MudText Typo="Typo.h4">Account</MudText>
    @if (@isLoading)
    {
        <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" />
    }
    else
    {
        <MudForm>
            <MudTextField @bind-Value="user.Username" Label="Username" Disabled="true" Class="my-2" />
            <MudTextField @bind-Value="user.FirstName" Label="First Name" Class="my-2" />
            <MudTextField @bind-Value="user.LastName" Label="Last Name" Class="my-2" />
            <MudTextField @bind-Value="user.CreatedAt" Label="Created At" Disabled="true" Class="my-2" />

            @if (@isSaving)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary">
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    <span class="mx-2">Saving Changes...</span>
                </MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UpdateUserDetails">Save Changes</MudButton>
            }
        </MudForm>
    }
</MudPaper>

@code {
    private string userId = "";
    private User user = new User();
    private bool isLoading = true;
    private bool isSaving = false;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user?.Identity?.IsAuthenticated ?? false)
        {
            // Extract the user ID from the JWT
            userId = await AuthenticationStateProvider.GetUserIdFromTokenAsync();

            // Fetch user details from the backend using the userId
            await LoadUserDetails(userId);
        }
        else
        {
            Navigation.NavigateTo("/login");
            Snackbar.Add("User not logged in.", Severity.Error);
        }
        isLoading = false;
    }

    private async System.Threading.Tasks.Task LoadUserDetails(string userId)
    {
        try
        {
            user = await Http.GetFromJsonAsync<User>($"api/users/{userId}");
        }
        catch (Exception ex)
        {
            // Handle the error (optional)
            //NotificationService.ShowError("Failed to load user details.");
            Console.WriteLine(ex.Message);
        }
    }

    private async System.Threading.Tasks.Task UpdateUserDetails()
    {
        try
        {
            isSaving = true;
            await Http.PutAsJsonAsync($"api/users/{userId}", user);
            //  NotificationService.ShowSuccess("User details updated successfully.");
            Snackbar.Add("Account details updated!", Severity.Success);
            isSaving = false;
            StateHasChanged();

        }
        catch (Exception ex)
        {
            // Handle the error (optional)
           // NotificationService.ShowError("Failed to update user details.");
            Snackbar.Add("Error updating account details.", Severity.Error);
            Console.WriteLine(ex.Message);
            isSaving = false;
            StateHasChanged();

        }
    }
}
