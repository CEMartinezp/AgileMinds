@page "/project/{projectId:int}"
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject Services.ProjectService ProjectService
@inject IDialogService DialogService
@inject JwtAuthenticationStateProvider AuthenticationStateProvider

@using AgileMindsUI.Client.Auth
@using Microsoft.AspNetCore.Components.Authorization
@using AgileMinds.Shared.Models

<style>
    .mud-input > input.mud-input-root-outlined {
        padding: 14px !important;
    }

    .mud-table-container {
        overflow-y: auto !important;
        max-height: 48vh !important;
    }

    .mud-table-body .mud-table-cell:first-child:hover {
        cursor: pointer !important;
        color: var(--mud-palette-primary-lighten) !important;
    }

    .mud-table-body .mud-table-cell {
        font-size: 0.9rem !important;
        border-bottom: 0px !important;
    }

    .mud-table-cell{
        border-bottom: 0px !important;
    }

    .mud-table-body .mud-table-row:hover {
        color: var(--mud-palette-primary-lighten) !important;
    }


    .custom-loading-color{
        background: linear-gradient(to right, #6629f4, #ee40b8) !important;
    }

    .mud-chip > .mud-chip-content {
        align-items: center;
        display: inline-flex;
        height: 100%;
        max-width: 100%;
        color: whitesmoke;
    }
 </style>
<PageTitle>@project.Name</PageTitle>

<MudPaper Class="px-6 py-4 ma-2" Elevation="3">
    @if (@loading)
    {
        <MudText Typo="Typo.h5" GutterBottom="true">Loading Project Details</MudText>
        <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" />

    }
    else
    {
        <MudText Typo="Typo.h4" GutterBottom="true">@project.Name</MudText>
        <MudText Typo="Typo.body1">@project.Description</MudText>
        <div class="d-flex">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Task" @onclick="OpenCreateTaskDialog" Class="my-2 mr-2">Create Task</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.ReplayCircleFilled" @onclick="OpenCreateSprintDialog" Class="my-2 mr-2">Create Sprint</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Person" @onclick="OpenAddMemberDialog" Class="my-2 mr-2">Add Member</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.QuestionAnswer" @onclick="OpenSuggestionAIDialog" Class="my-2 mr-2">Ask AI</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Dark" StartIcon="@Icons.Material.Filled.Settings" @onclick="OpenDiscordSettingsDialog" Class="my-2 mr-2 ml-auto">
            Project Integrations
        </MudButton>
        </div>

        <MudDivider Class="my-4" />
        @if (loadingTasks)
        {
            <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" />
        }
        else{
        <MudTabs>
            <MudTabPanel Text="Tasks">
                <MudPaper Class="pa-2 ma-2" Elevation="0">

                    @if (tasks != null && tasks.Count > 0)
                    {
                        <MudGrid Justify="Justify.SpaceBetween" Style="align-items:center;">
                            <MudItem xs="5">
                                <MudTextField T="string"
                                                Label="Search tasks"
                                                @bind-Value="searchTerm"
                                                Variant="Variant.Outlined"
                                                Adornment="Adornment.Start"
                                                AdornmentIcon="@Icons.Material.Filled.Search"
                                                Class="mb-0"
                                                DebounceInterval="400"
                                                Clearable="true"
                                                Style="padding-top: 0px !important;" />
                            </MudItem>
                            <MudItem>
                                <MudButton
                                    Color="Color.Dark"
                                    Variant="Variant.Filled"
                                    StartIcon="@Icons.Material.Filled.Refresh"
                                    @onclick="(async(e) => await ReloadTasks(true))"
                                    Style="padding-right: 4px !important;" />
                                   @*  <MudButton Color="Color.Dark"
                                               Variant="Variant.Filled"
                                               StartIcon="@Icons.Material.Filled.Add"
                                               @onclick="(async(e) => await ReloadTasks(true))"
                                               Style="padding-right: 4px !important;" /> *@
                            </MudItem>


                        </MudGrid>
                        <MudTable Items="@filteredTasks" Hover="true" Bordered="true" Striped="true">
                            <HeaderContent>
                                <MudTh>Name</MudTh>
@*                                 <MudTh>Description</MudTh>
 *@                                <MudTh>Status</MudTh>
                                <MudTh>Created At</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Name" @onclick="@(async () => await OnTaskRowClicked(@context))">
                                    @context.Name
                                </MudTd>
                        @*         <MudTd DataLabel="Description">@context.Description</MudTd> *@
                                    <MudTd DataLabel="Status">
                                        <MudChip T="string" Style="@GetStatusStyle(@context.Status.ToString())"> @context.Status.ToString()</MudChip>
                                    </MudTd>
                                <MudTd DataLabel="Created At">@context.CreatedAt.ToString("yyyy-MM-dd")</MudTd>
                            </RowTemplate>
                            <PagerContent>
                                <MudTablePager PageSizeOptions="new int[] { 5, 10, 25, 50, 100, int.MaxValue }"  />
                            </PagerContent>
                        </MudTable>
                    }
                    else
                    {
                        <MudText Typo="Typo.body2">No tasks created yet.</MudText>
                    }
                </MudPaper>
            </MudTabPanel>

            <MudTabPanel Text="Members">
                <MudPaper Class="pa-2 ma-2" Elevation="0">
                    <MudText Typo="Typo.h6">Members</MudText>
                    @if (members != null && members.Count > 0)
                    {
                        @foreach (var member in members)
                        {
                            <MudChip T="string" Color="Color.Dark">@member.Username</MudChip>
                        }
                    }
                    else
                    {
                        <MudText Typo="Typo.body2">No members added yet.</MudText>
                    }
                </MudPaper>
            </MudTabPanel>

            <MudTabPanel Text="Sprints">
                <MudPaper Class="pa-2 ma-2" Elevation="0">
                    <MudText Typo="Typo.h6">Sprints</MudText>
                    @if (sprints != null && sprints.Count > 0)
                    {
                        @foreach (var sprint in sprints)
                        {
                            <MudPaper Class="pa-4 my-2" Elevation="2">
                                <MudText Typo="Typo.body1">@sprint.Name</MudText>
                                <MudText Typo="Typo.caption">@sprint.StartDate.ToString("dd MMM yyyy") - @sprint.EndDate.ToString("dd MMM yyyy")</MudText>
                            </MudPaper>
                        }
                    }
                    else
                    {
                        <MudText Typo="Typo.body2">No sprints created yet.</MudText>
                    }
                </MudPaper>
            </MudTabPanel>
            <MudTabPanel Text="Canvas Assignments">
                @if (loadingAssignments)
                {
                    <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" />
                }
                else if (assignments != null && assignments.Count > 0)
                {
                    <MudTable Items="assignments" Hover="true" Bordered="true" Striped="true">
                        <HeaderContent>
                            <MudTh>Name</MudTh>
                            <MudTh>Description</MudTh>
                            <MudTh>Due Date</MudTh>
                            <MudTh>Points Possible</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Name">@context.Name</MudTd>
                                <MudTd DataLabel="Description">
                                    @((MarkupString)context.Description)
                                </MudTd>
                            <MudTd DataLabel="Due Date">@context.DueAt?.ToString("yyyy-MM-dd")</MudTd>
                            <MudTd DataLabel="Points Possible">@context.PointsPossible</MudTd>
                        </RowTemplate>
                    </MudTable>
                }
                else
                {
                    <MudText Typo="Typo.body2">No assignments found.</MudText>
                }
            </MudTabPanel>
        </MudTabs>
        }

    }
</MudPaper>


@code {
    [Parameter] public int ProjectId { get; set; }
    [Parameter]
    public EventCallback<bool> OnSprintAdded { get; set; }
    private AgileMinds.Shared.Models.Project project = new AgileMinds.Shared.Models.Project();
    private DiscordIntegration? discordIntegrationDetails { get; set; }
    private CanvasIntegration? canvasIntegrationDetails { get; set; }

    private List<AgileMinds.Shared.Models.Task> tasks = new List<AgileMinds.Shared.Models.Task>();
    private List<AgileMinds.Shared.Models.User> members = new List<AgileMinds.Shared.Models.User>();
    private List<AgileMinds.Shared.Models.Sprint> sprints = new List<AgileMinds.Shared.Models.Sprint>();
    private bool loading { get; set; } = false;
    private bool loadingTasks { get; set; } = false;
    private string searchTerm = string.Empty;
    private int userID { get; set; }
    private string sprintName  = string.Empty;
    private List<AgileMinds.Shared.Models.Task> filteredTasks => string.IsNullOrEmpty(searchTerm)
       ? tasks
       : tasks.Where(t => t.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                          t.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();


    private List<AssignmentDto> assignments = new List<AssignmentDto>();
    private bool loadingAssignments = false;

    private async System.Threading.Tasks.Task LoadCanvasAssignments()
    {
        loadingAssignments = true;
        try
        {
            var response = await Http.GetFromJsonAsync<List<AssignmentDto>>($"api/projects/{ProjectId}/canvasassignments");
            if (response != null)
            {
                assignments = response;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading assignments: {ex.Message}", Severity.Error);
        }
        loadingAssignments = false;
    }

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        loading = true;
        userID = await GetCurrentUserId();

        // Fetch project
        project = await ProjectService.FetchProjectById(ProjectId);

        // After the project is fetched, check if it has integrations
        if (project != null && (project.CanvasIntegration || project.DiscordIntegration))
        {
            await LoadIntegrations();
            if(canvasIntegrationDetails != null)
            {
                await LoadCanvasAssignments();
            }
        }
        
        // Load other project-related data
        var loadTasks = LoadTasks();
        var loadMembers = LoadMembers();
        var loadSprints = LoadSprints();

        // Wait for all the tasks to complete
        await System.Threading.Tasks.Task.WhenAll(loadTasks, loadMembers, loadSprints);

        loading = false;
    }

    private async System.Threading.Tasks.Task LoadIntegrations()
    {
        try
        {
            var integrationResponse = await Http.GetFromJsonAsync<IntegrationDto>($"api/projects/{ProjectId}/integrations");
            if (integrationResponse != null)
            {
                discordIntegrationDetails = integrationResponse.DiscordIntegration;
                canvasIntegrationDetails = integrationResponse.CanvasIntegration;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading integrations: {ex.Message}", Severity.Error);
        }
    }
    private async System.Threading.Tasks.Task<int> GetCurrentUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userIdClaim = user.FindFirst(claim => claim.Type == "userid");
        return int.Parse(userIdClaim?.Value ?? "0");
    }

    private string GetStatusStyle(string status)
    {
        switch (status)
        {
            case "Pending":
                return "background-color:var(--mud-palette-error-lighten) !important; width: 100px;";
            case "InProgress":
                return "background-color:var(--mud-palette-warning-darken) !important; width: 100px;";
            case "Completed":
                return "background-color:var(--mud-palette-success-darken) !important; width: 100px;";
            default:
                return "background-color:var(--mud-palette-default) !important;";
        }
    }
    private async System.Threading.Tasks.Task LoadProjectDetails()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<AgileMinds.Shared.Models.Project>($"api/projects/{ProjectId}");
            if (response != null)
            {
                project = response;
            }
            else
            {
                Snackbar.Add("Project not found.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading project: {ex.Message}", Severity.Error);
        }
    }

    private async System.Threading.Tasks.Task OnTaskRowClicked(AgileMinds.Shared.Models.Task task)
    {
        OpenEditTaskDialog(task);
    }

    private void OpenEditTaskDialog(AgileMinds.Shared.Models.Task task)
    {
        var parameters = new DialogParameters
        {
            { "Task", task },
            { "ProjectId", ProjectId },
            { "OnTaskAdded", EventCallback.Factory.Create<bool>(this, ReloadTasks)}

        };

        var options = new DialogOptions { CloseButton = true, FullWidth = true };

        DialogService.Show<Components.AddTaskDialog>("Edit Task", parameters, options);
    }

    private void OpenDiscordSettingsDialog()
    {
        var parameters = new DialogParameters
        {
            { "ProjectId", ProjectId }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            FullWidth = true,
            MaxWidth = MaxWidth.Medium
        };

        DialogService.Show<Components.Keys>("Discord Integration Settings", parameters, options);
    }



    private async System.Threading.Tasks.Task LoadTasks()
    {
        loadingTasks = true;
        StateHasChanged();
        try
        {
            tasks = await Http.GetFromJsonAsync<List<AgileMinds.Shared.Models.Task>>($"api/projects/{ProjectId}/tasks");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading tasks: {ex.Message}", Severity.Error);
        }
        loadingTasks = false;
    }

    private async System.Threading.Tasks.Task LoadMembers()
    {
        try
        {
            members = await Http.GetFromJsonAsync<List<AgileMinds.Shared.Models.User>>($"api/projects/{ProjectId}/members");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading members: {ex.Message}", Severity.Error);
        }
    }

    private async System.Threading.Tasks.Task LoadSprints()
    {
        try
        {
            sprints = await Http.GetFromJsonAsync<List<AgileMinds.Shared.Models.Sprint>>($"api/projects/{ProjectId}/sprints");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading sprints: {ex.Message}", Severity.Error);
        }
    }

    private void OpenAddMemberDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("ProjectId", ProjectId);
        parameters.Add("InvitorUserID", userID);

        DialogOptions options = new DialogOptions()
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                BackdropClick = false
            };

        DialogService.Show<Components.AddMemberDialog>("Add New Member", parameters, options);
    }

    private void OpenSuggestionAIDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("ProjectId", ProjectId);
        parameters.Add("ProjectDescription", project.Description);
        parameters.Add("OnTaskAdded", EventCallback.Factory.Create<bool>(this, ReloadTasks));


        DialogOptions options = new DialogOptions()
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Large,
                FullWidth = true,
                BackdropClick = false
            };

        DialogService.Show<Components.SuggestionAI>("Ask AI", parameters, options);
    }

    private void OpenCreateTaskDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("ProjectId", ProjectId);
        parameters.Add("OnTaskAdded", EventCallback.Factory.Create<bool>(this, ReloadTasks));


        DialogService.Show<Components.AddTaskDialog>("Create Task", parameters);
    }

    private void OpenCreateSprintDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("ProjectId", ProjectId );
        parameters.Add("OnSprintAdded", EventCallback.Factory.Create<bool>(this, ReloadSprints));

        DialogService.Show<Components.AddSprintDialog>("Create New Sprint", parameters);
    }

    private async System.Threading.Tasks.Task ReloadTasks(bool taskAdded = true)
    {
        if (taskAdded)
        {
            await LoadTasks();
        }
        else
        {
            StateHasChanged();
        }
    }

    private async System.Threading.Tasks.Task ReloadSprints(bool sprintAdded = true)
    {
        if (sprintAdded)
        {
            await LoadSprints();
        }
        else
        {
            StateHasChanged();
        }
    }

    private void ClearSearch()
    {
        searchTerm = string.Empty;
    }

}
